# ==========================================
# OpenWrt 主编译通用模板（详细注释，极简上传，兼容 update-checker 自动触发）
# ==========================================

name: OpenWrt_Build_Template  # 工作流名称，可自定义

on:
  workflow_dispatch:  # 支持手动触发
  repository_dispatch:  # 支持 update-checker 自动触发
    types: [Source Code Update YOUR_PROJECT]  # ← 替换为你的事件类型

# ================= 全局环境变量 =================
env:
  REPO_URL: https://github.com/your/openwrt.git         # OpenWrt 源码仓库地址
  REPO_BRANCH: master                                  # OpenWrt 源码分支
  CONFIG_FILE: configs/your_device.config               # 设备 .config 文件路径
  DIY_SCRIPT: diy-script.sh                            # 自定义补丁脚本路径
  FIRMWARE_TAG: OpenWrt-AutoBuild                      # 发布标签（建议唯一）
  CACHE_TOOLCHAIN: true                                # 是否缓存工具链（加速二次编译）
  UPLOAD_BIN_DIR: false                                # 是否上传完整 bin 目录（一般为 false）
  FIRMWARE_RELEASE: true                               # 是否上传到 Release（true=上传）
  CLASH_KERNEL: amd64                                  # clash 内核架构
  TZ: Asia/Shanghai                                    # 时区

jobs:
  Build:
    runs-on: ubuntu-22.04  # 编译环境，建议 22.04

    steps:
    # 检查服务器性能（可选，便于了解编译资源）
    - name: Check Server Performance
      run: |
        echo "警告⚠ 服务器性能有限，插件过多请注意！"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
        echo "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
        echo "--------------------------内存信息--------------------------"
        sudo lshw -short -C memory | grep GiB || true
        echo "--------------------------硬盘信息--------------------------"
        df -hT

    # 初始化环境，清理无用依赖，释放空间
    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) || true
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    # 合并磁盘空间，防止磁盘爆满
    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    # 拉取 workflow 仓库代码
    - name: Checkout
      uses: actions/checkout@v4

    # 克隆 OpenWrt 源码并提取元信息
    - name: Clone Source Code
      run: |
        git clone --depth 1 -b "$REPO_BRANCH" "$REPO_URL" openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        # 提取主分支最后一次提交信息
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H" 2>/dev/null || echo "unknown")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        # 提取内核版本（兼容多种源码结构）
        VERSION_KERNEL="unknown"
        if ls target/linux/generic/kernel-* 1>/dev/null 2>&1; then
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-* | head -n1 || true)
        elif grep -r -m1 -oP 'LINUX_VERSION:=[ ]*\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/ 2>/dev/null | head -n1 | grep -q .; then
          VERSION_KERNEL=$(grep -r -m1 -oP 'LINUX_VERSION:=[ ]*\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/ | head -n1)
        fi
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

    # 生成变量，便于后续缓存和发布
    - name: Generate Variables
      run: |
        cp "$CONFIG_FILE" "$OPENWRT_PATH/.config"
        cd "$OPENWRT_PATH"
        make defconfig
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        # 提取 target
        DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | grep -o '\".*\"' | tr -d '\"' || true)
        [ -z "$DEVICE_TARGET" ] && DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | awk -F '=' '{print $2}' | tr -d '\"' || true)
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | grep -o '\".*\"' | tr -d '\"' || true)
        [ -z "$DEVICE_SUBTARGET" ] && DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | awk -F '=' '{print $2}' | tr -d '\"' || true)
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    # 缓存工具链，加速二次编译（可选）
    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    # 安装 feeds（OpenWrt 插件源）
    - name: Install Feeds
      run: |
        cd "$OPENWRT_PATH"
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    # 加载自定义配置并运行 DIY 脚本
    - name: Load Custom Configuration and Run DIY Script
      run: |
        [ -e files ] && mv files "$OPENWRT_PATH/files"
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" "$OPENWRT_PATH/.config"
        chmod +x "$DIY_SCRIPT" || true
        cd "$OPENWRT_PATH"
        if [ -f "$GITHUB_WORKSPACE/$DIY_SCRIPT" ]; then
          "$GITHUB_WORKSPACE/$DIY_SCRIPT" || true
        else
          echo "::warning ::DIY script not found, skipped"
        fi

    # 下载 DL 包（源码依赖包，失败立即终止）
    - name: Download DL Package
      run: |
        cd "$OPENWRT_PATH"
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # 编译固件（核心步骤）
    - name: Compile Firmware
      id: compile
      run: |
        cd "$OPENWRT_PATH"
        echo "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +\"%Y-%m-%d %H:%M:%S\")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +\"%Y.%m.%d\")" >> $GITHUB_ENV

    # 检查空间使用（可选）
    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    # 整理固件与插件，确保所有需上传文件都在固件目录
    - name: Organize Files (整理固件与插件)
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat sha256sums || true                      # 输出固件校验信息
        cp $OPENWRT_PATH/.config build.config       # 备份编译配置
        mkdir -p packages
        # 收集所有插件包（可选）
        find $OPENWRT_PATH/bin/packages/*/*/ -maxdepth 1 -type f \( -name '*.ipk' -o -name '*.apk' \) -exec cp {} packages/ \; 2>/dev/null || true
        [ -d packages ] && tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo 2>/dev/null || true
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV    # 设置固件发布目录

    # 上传固件到 Artifact（可选，供调试下载）
    - name: Upload Firmware To Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    # 上传固件到 Release（极简、兼容、易维护，上传固件目录下所有文件）
    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*  # 上传固件目录下所有文件，简单、兼容、易维护
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 固件源码: ${{ env.REPO_URL }}
          - 源码分支: ${{ env.REPO_BRANCH }}
          - 默认地址: 192.168.1.1
          - 默认密码: password
          - 固件内核版本: ${{ env.VERSION_KERNEL }}
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.VERSION_INFO }}
